# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'fe.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QImage
from tkinter.filedialog import askopenfilename
from brushfe import Ui_Brush
from adjustfe import Ui_Adjust
from filterfe import Ui_Filter
import imutils,cv2
from PIL import Image
import pygame
import numpy as np
from qcrop.ui import QCrop
pygame.init()

#import Functions

class Ui_MainWindow(object):
    def openBrush(self):
        self.widget=QtWidgets.QWidget()
        self.uib= Ui_Brush()
        self.uib.setupUi(self.widget)
        self.widget.show()

    def openFilter(self):
        self.widget=QtWidgets.QWidget()
        self.uif= Ui_Filter()
        self.uif.setupUi(self.widget)
        self.widget.show()

    def openAdjust(self):
        self.widget=QtWidgets.QWidget()
        self.uia= Ui_Adjust()
        self.uia.setupUi(self.widget)
        self.widget.show()

    def insert(self):
        self.filename=QFileDialog.getOpenFileName(filter='Image (*.*)')[0]
        self.image=cv2.imread(self.filename)
        self.setPhoto(self.image)

    def setPhoto(self,image):
        self.tmp=image
        image=imutils.resize(image,height=1200,width=700)
        frame=cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image=QImage(frame, frame.shape[1],frame.shape[0],frame.strides[0],QImage.Format_RGB888)
        self.label.setPixmap(QtGui.QPixmap.fromImage(image))


    def crop(self,image):
        screen = pygame.display.set_mode((700, 600))
        cimage = pygame.image.load(self.filename)
        crop_rect = pygame.Rect(0, 0, 0, 0)
        cropping=False
        running=True
        while running:
          for event in pygame.event.get():
            if event.type==pygame.MOUSEBUTTONDOWN:
              if event.button==pygame.BUTTON_LEFT:
                cropping=True
                crop_rect.topleft = event.pos
                print(crop_rect.topleft)
            elif event.type==pygame.MOUSEBUTTONUP:
              if event.button == pygame.BUTTON_LEFT:

                print(crop_rect.width,crop_rect.height)
                cropping = False
                running=False
          if cropping:
            crop_rect.width = pygame.mouse.get_pos()[0] - crop_rect.x
            crop_rect.height = pygame.mouse.get_pos()[1] - crop_rect.y
          screen.fill((0,0,0))
          screen.blit(cimage,(0,0))
          pygame.draw.rect(screen, (255, 0, 0), crop_rect, 2)
          pygame.display.flip()
        print('h') 
        cropped_image = pygame.Surface((crop_rect.width, crop_rect.height))
        cropped_image.blit(cimage, (0, 0), crop_rect)
        cropped_screen = pygame.display.set_mode((crop_rect.width, crop_rect.height))
        cropped_screen.blit(cropped_image, (0, 0))
        pygame.display.flip()


    def zoom_and_pan(self,image):
        screen_width, screen_height = 800, 600

        image = pygame.image.load(image_path)
        image_rect = image.get_rect()
        image_x, image_y = 0, 0

        scale_factor = 1.0
        pan_x, pan_y = 0, 0

        is_panning = False
        start_x, start_y = 0, 0

        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    return

                elif event.type == pygame.MOUSEBUTTONDOWN:
                    if event.button == pygame.BUTTON_WHEELUP:
                        scale_factor *= 1.1
                    elif event.button == pygame.BUTTON_WHEELDOWN:
                        scale_factor *= 0.9

                    if event.button == 1:
                        is_panning = True
                        start_x, start_y = event.pos

                elif event.type == pygame.MOUSEBUTTONUP:
                    if event.button == 1:
                        is_panning = False

                elif event.type == pygame.MOUSEMOTION:
                    if is_panning:
                        dx = event.pos[0] - start_x
                        dy = event.pos[1] - start_y
                        start_x, start_y = event.pos

                        pan_x += dx
                        pan_y += dy


            # Calculate the new image dimensions based on the scale factor
            new_width = int(image_rect.width * scale_factor)
            new_height = int(image_rect.height * scale_factor)
            scaled_image = pygame.transform.scale(image, (new_width, new_height))

            # Calculate the position to center the image on the screen
            image_x = (screen_width - new_width) // 2 + pan_x
            image_y = (screen_height - new_height) // 2 + pan_y
            return scaled_image

    def fliplr(self,image):
        image = cv2.flip(image, 1)
        return image

    def flipud(self,image):
        image = cv2.flip(self.image, 0)
        return image

    def clockrotate(self,image):
        image = cv2.rotate(self.image, cv2.ROTATE_90_CLOCKWISE)
        return image

    def counterclockrotate(self,image):
        image = cv2.rotate(self.image, cv2.ROTATE_90_COUNTERCLOCKWISE)
        return image

    def updatecrop(self,image):
        self.image=self.crop(self.image)
        self.setPhoto(self.image)

    def updatezap(self,image):
        self.image=self.zoom_and_pan(self.image)
        self.setPhoto(self.image)

    def updateflr(self,image):
        self.image=self.fliplr(self.image)
        self.setPhoto(self.image)
        

    def updatefud(self,image):
        self.image=self.flipud(self.image)
        self.setPhoto(self.image)

    def updatecrot(self,image):
        self.image=self.clockrotate(self.image)
        self.setPhoto(self.image)

    def updateccrot(self,image):
        self.image=self.counterclockrotate(self.image)
        self.setPhoto(self.image)

    def save(self):
        cv2.imwrite(self.filename,self.tmp)

   
        
        
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1474, 852)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.undoButton = QtWidgets.QToolButton(self.centralwidget)
        self.undoButton.setGeometry(QtCore.QRect(50, 730, 62, 62))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../Icon/Undo Icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.undoButton.setIcon(icon)
        self.undoButton.setIconSize(QtCore.QSize(62, 62))
        self.undoButton.setObjectName("undoButton")
        self.redoButton = QtWidgets.QToolButton(self.centralwidget)
        self.redoButton.setGeometry(QtCore.QRect(130, 730, 62, 62))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("../Icon/Redo Icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.redoButton.setIcon(icon1)
        self.redoButton.setIconSize(QtCore.QSize(62, 62))
        self.redoButton.setObjectName("redoButton")
        self.brushBotton = QtWidgets.QToolButton(self.centralwidget, clicked=lambda:self.openBrush())
        self.brushBotton.setGeometry(QtCore.QRect(10, 10, 222, 102))
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("../Icon/brush1.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.brushBotton.setIcon(icon2)
        self.brushBotton.setIconSize(QtCore.QSize(70, 84))
        self.brushBotton.setObjectName("brushBotton")
        self.cropButton = QtWidgets.QToolButton(self.centralwidget)
        self.cropButton.clicked.connect(self.updatecrop)
        self.cropButton.setGeometry(QtCore.QRect(10, 130, 102, 102))
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("../Icon/Crop Icon.jpeg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.cropButton.setIcon(icon3)
        self.cropButton.setIconSize(QtCore.QSize(160, 80))
        self.cropButton.setObjectName("cropButton")
        self.zapButton = QtWidgets.QToolButton(self.centralwidget)
        self.zapButton.clicked.connect(self.crop)
        self.zapButton.setGeometry(QtCore.QRect(130, 130, 102, 102))
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("../Icon/Zoom and Pan Icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.zapButton.setIcon(icon4)
        self.zapButton.setIconSize(QtCore.QSize(102, 102))
        self.zapButton.setObjectName("zapButton")
        self.flrButton = QtWidgets.QToolButton(self.centralwidget)
        self.flrButton.clicked.connect(self.updateflr)
        self.flrButton.setGeometry(QtCore.QRect(10, 250, 102, 102))
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("../Icon/Flip.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.flrButton.setIcon(icon5)
        self.flrButton.setIconSize(QtCore.QSize(102, 102))
        self.flrButton.setObjectName("flrButton")
        self.filterButton = QtWidgets.QToolButton(self.centralwidget, clicked=lambda:self.openFilter())
        self.filterButton.setGeometry(QtCore.QRect(10, 490, 222, 102))
        font = QtGui.QFont()
        font.setFamily("Poor Richard")
        font.setPointSize(26)
        font.setItalic(False)
        self.filterButton.setFont(font)
        self.filterButton.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.filterButton.setObjectName("filterButton")
        self.fudButton = QtWidgets.QToolButton(self.centralwidget)
        self.fudButton.clicked.connect(self.updatefud)
        self.fudButton.setGeometry(QtCore.QRect(130, 250, 102, 102))
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("../Icon/FlipUD.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.fudButton.setIcon(icon6)
        self.fudButton.setIconSize(QtCore.QSize(102, 102))
        self.fudButton.setObjectName("fudButton")
        self.rotateantiButton = QtWidgets.QToolButton(self.centralwidget)
        self.rotateantiButton.clicked.connect(self.updateccrot)
        self.rotateantiButton.setGeometry(QtCore.QRect(130, 370, 102, 102))
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("../Icon/rotationanti.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rotateantiButton.setIcon(icon7)
        self.rotateantiButton.setIconSize(QtCore.QSize(90, 90))
        self.rotateantiButton.setObjectName("rotateantiButton")
        self.rotateclockButton = QtWidgets.QToolButton(self.centralwidget)
        self.rotateclockButton.clicked.connect(self.updatecrot)
        self.rotateclockButton.setGeometry(QtCore.QRect(10, 370, 102, 102))
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("../Icon/rotaioncl.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rotateclockButton.setIcon(icon8)
        self.rotateclockButton.setIconSize(QtCore.QSize(90, 90))
        self.rotateclockButton.setObjectName("rotateclockButton")
        self.adjustButton = QtWidgets.QToolButton(self.centralwidget, clicked=lambda:self.openAdjust())
        self.adjustButton.setGeometry(QtCore.QRect(10, 610, 222, 102))
        font = QtGui.QFont()
        font.setFamily("Poor Richard")
        font.setPointSize(26)
        self.adjustButton.setFont(font)
        self.adjustButton.setObjectName("adjustButton")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(250, 10, 1201, 701))
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1474, 18))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.triggered.connect(self.insert)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionSave_As = QtWidgets.QAction(MainWindow)
        self.actionSave_As.setObjectName("actionSave_As")
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_As)
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        

        #New Code

        self.filename=None
        self.tmp=None

   

    def brightness_change(self,image,value):
        image = Image.fromarray(image)
        enhancer = ImageEnhance.Brightness(image)
        brightened_image = enhancer.enhance(value)
        return image
 

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.undoButton.setText(_translate("MainWindow", "..."))
        self.undoButton.setShortcut(_translate("MainWindow", "Ctrl+Z"))
        self.redoButton.setText(_translate("MainWindow", "..."))
        self.redoButton.setShortcut(_translate("MainWindow", "Ctrl+Shift+Z"))
        self.brushBotton.setText(_translate("MainWindow", "..."))
        self.cropButton.setText(_translate("MainWindow", "..."))
        self.zapButton.setText(_translate("MainWindow", "..."))
        self.flrButton.setText(_translate("MainWindow", "..."))
        self.filterButton.setText(_translate("MainWindow", "FILTERS"))
        self.fudButton.setText(_translate("MainWindow", "..."))
        self.rotateantiButton.setText(_translate("MainWindow", "..."))
        self.rotateclockButton.setText(_translate("MainWindow", "..."))
        self.adjustButton.setText(_translate("MainWindow", "ADJUST"))
        self.label.setText(_translate("MainWindow", ""))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionOpen.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionSave.setText(_translate("MainWindow", "Save"))
        self.actionSave.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionSave_As.setText(_translate("MainWindow", "Save As"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
